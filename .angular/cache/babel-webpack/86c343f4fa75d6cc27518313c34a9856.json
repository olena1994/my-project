{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { CartService } from './cart.service';\nlet httpClientSpy;\nlet cartService;\nbeforeEach(() => {\n  httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n  cartService = new CartService(httpClientSpy);\n});\nit('should return expected carts (HttpClient called once)', done => {\n  const expectedHeroes = [{\n    id: 1,\n    name: 'A'\n  }, {\n    id: 2,\n    name: 'B'\n  }];\n  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n  heroService.getHeroes().subscribe({\n    next: heroes => {\n      expect(heroes).withContext('expected heroes').toEqual(expectedHeroes);\n      done();\n    },\n    error: done.fail\n  });\n  expect(httpClientSpy.get.calls.count()).withContext('one call').toBe(1);\n});\nit('should return an error when the server returns a 404', done => {\n  const errorResponse = new HttpErrorResponse({\n    error: 'test 404 error',\n    status: 404,\n    statusText: 'Not Found'\n  });\n  httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n  heroService.getHeroes().subscribe({\n    next: heroes => done.fail('expected an error, not heroes'),\n    error: error => {\n      expect(error.message).toContain('test 404 error');\n      done();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/olena.kopyl/Documents/projects/my-project/src/app/cart.service.spec.ts"],"names":["HttpErrorResponse","CartService","httpClientSpy","cartService","beforeEach","jasmine","createSpyObj","it","done","expectedHeroes","id","name","get","and","returnValue","asyncData","heroService","getHeroes","subscribe","next","heroes","expect","withContext","toEqual","error","fail","calls","count","toBe","errorResponse","status","statusText","asyncError","message","toContain"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,IAAIC,aAAJ;AACA,IAAIC,WAAJ;AACAC,UAAU,CAAC,MAAM;AACbF,EAAAA,aAAa,GAAGG,OAAO,CAACC,YAAR,CAAqB,YAArB,EAAmC,CAAC,KAAD,CAAnC,CAAhB;AACAH,EAAAA,WAAW,GAAG,IAAIF,WAAJ,CAAgBC,aAAhB,CAAd;AACH,CAHS,CAAV;AAIAK,EAAE,CAAC,uDAAD,EAA2DC,IAAD,IAAU;AAClE,QAAMC,cAAc,GAAG,CAAC;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAAD,EAAuB;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAAvB,CAAvB;AACAT,EAAAA,aAAa,CAACU,GAAd,CAAkBC,GAAlB,CAAsBC,WAAtB,CAAkCC,SAAS,CAACN,cAAD,CAA3C;AACAO,EAAAA,WAAW,CAACC,SAAZ,GAAwBC,SAAxB,CAAkC;AAC9BC,IAAAA,IAAI,EAAEC,MAAM,IAAI;AACZC,MAAAA,MAAM,CAACD,MAAD,CAAN,CACKE,WADL,CACiB,iBADjB,EAEKC,OAFL,CAEad,cAFb;AAGAD,MAAAA,IAAI;AACP,KAN6B;AAO9BgB,IAAAA,KAAK,EAAEhB,IAAI,CAACiB;AAPkB,GAAlC;AASAJ,EAAAA,MAAM,CAACnB,aAAa,CAACU,GAAd,CAAkBc,KAAlB,CAAwBC,KAAxB,EAAD,CAAN,CACKL,WADL,CACiB,UADjB,EAEKM,IAFL,CAEU,CAFV;AAGH,CAfC,CAAF;AAgBArB,EAAE,CAAC,sDAAD,EAA0DC,IAAD,IAAU;AACjE,QAAMqB,aAAa,GAAG,IAAI7B,iBAAJ,CAAsB;AACxCwB,IAAAA,KAAK,EAAE,gBADiC;AAExCM,IAAAA,MAAM,EAAE,GAFgC;AAE3BC,IAAAA,UAAU,EAAE;AAFe,GAAtB,CAAtB;AAIA7B,EAAAA,aAAa,CAACU,GAAd,CAAkBC,GAAlB,CAAsBC,WAAtB,CAAkCkB,UAAU,CAACH,aAAD,CAA5C;AACAb,EAAAA,WAAW,CAACC,SAAZ,GAAwBC,SAAxB,CAAkC;AAC9BC,IAAAA,IAAI,EAAEC,MAAM,IAAIZ,IAAI,CAACiB,IAAL,CAAU,+BAAV,CADc;AAE9BD,IAAAA,KAAK,EAAEA,KAAK,IAAI;AACZH,MAAAA,MAAM,CAACG,KAAK,CAACS,OAAP,CAAN,CAAsBC,SAAtB,CAAgC,gBAAhC;AACA1B,MAAAA,IAAI;AACP;AAL6B,GAAlC;AAOH,CAbC,CAAF","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { CartService } from './cart.service';\nlet httpClientSpy;\nlet cartService;\nbeforeEach(() => {\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n    cartService = new CartService(httpClientSpy);\n});\nit('should return expected carts (HttpClient called once)', (done) => {\n    const expectedHeroes = [{ id: 1, name: 'A' }, { id: 2, name: 'B' }];\n    httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n    heroService.getHeroes().subscribe({\n        next: heroes => {\n            expect(heroes)\n                .withContext('expected heroes')\n                .toEqual(expectedHeroes);\n            done();\n        },\n        error: done.fail\n    });\n    expect(httpClientSpy.get.calls.count())\n        .withContext('one call')\n        .toBe(1);\n});\nit('should return an error when the server returns a 404', (done) => {\n    const errorResponse = new HttpErrorResponse({\n        error: 'test 404 error',\n        status: 404, statusText: 'Not Found'\n    });\n    httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n    heroService.getHeroes().subscribe({\n        next: heroes => done.fail('expected an error, not heroes'),\n        error: error => {\n            expect(error.message).toContain('test 404 error');\n            done();\n        }\n    });\n});\n"]},"metadata":{},"sourceType":"module"}