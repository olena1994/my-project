{"ast":null,"code":"\"use strict\"; // import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n// import { CartService } from './cart.service';\n// import { Phone } from './models/phone';\n//\n// let httpClientSpy: jasmine.SpyObj<HttpClient>;\n// let cartService: CartService;\n//\n// beforeEach(() => {\n//   httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n//   cartService = new CartService(httpClientSpy);\n// });\n//\n// it('should return expected carts (HttpClient called once)', (done: DoneFn) => {\n//   const expectedHeroes: Phone[] =\n//     [\n//       { id: '1', age: 1, snippet: 'dfb', imageUrl: 'drfgsb', name: 'zdrvs', price: 34 },\n//       { id: '2', age: 3, snippet: 'dfbfb', imageUrl: 'drfgxfbsb', name: 'zdrxfgbvs', price: 334 },\n//     ];\n//\n//   httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => {\n//       expect(carts)\n//         .withContext('expected heroes')\n//         .toEqual(expectedHeroes);\n//       done();\n//     },\n//     error: done.fail\n//   });\n//   expect(httpClientSpy.get.calls.count())\n//     .withContext('one call')\n//     .toBe(1);\n// });\n//\n// it('should return an error when the server returns a 404', (done: DoneFn) => {\n//   const errorResponse = new HttpErrorResponse({\n//     error: 'test 404 error',\n//     status: 404, statusText: 'Not Found'\n//   });\n//\n//   httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => done.fail('expected an error, not heroes'),\n//     error: error  => {\n//       expect(error.message).toContain('test 404 error');\n//       done();\n//     }\n//   });\n// });\n\ndescribe('CartService', () => {\n  it('should ', function () {});\n  it('should ', function () {});\n});","map":{"version":3,"sources":["/Users/olena.kopyl/Documents/projects/my-project/src/app/cart.service.spec.ts"],"names":["describe","it"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC1BC,EAAAA,EAAE,CAAC,SAAD,EAAY,YAAY,CACzB,CADC,CAAF;AAEAA,EAAAA,EAAE,CAAC,SAAD,EAAY,YAAY,CACzB,CADC,CAAF;AAEH,CALO,CAAR","sourcesContent":["\"use strict\";\n// import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n// import { CartService } from './cart.service';\n// import { Phone } from './models/phone';\n//\n// let httpClientSpy: jasmine.SpyObj<HttpClient>;\n// let cartService: CartService;\n//\n// beforeEach(() => {\n//   httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n//   cartService = new CartService(httpClientSpy);\n// });\n//\n// it('should return expected carts (HttpClient called once)', (done: DoneFn) => {\n//   const expectedHeroes: Phone[] =\n//     [\n//       { id: '1', age: 1, snippet: 'dfb', imageUrl: 'drfgsb', name: 'zdrvs', price: 34 },\n//       { id: '2', age: 3, snippet: 'dfbfb', imageUrl: 'drfgxfbsb', name: 'zdrxfgbvs', price: 334 },\n//     ];\n//\n//   httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => {\n//       expect(carts)\n//         .withContext('expected heroes')\n//         .toEqual(expectedHeroes);\n//       done();\n//     },\n//     error: done.fail\n//   });\n//   expect(httpClientSpy.get.calls.count())\n//     .withContext('one call')\n//     .toBe(1);\n// });\n//\n// it('should return an error when the server returns a 404', (done: DoneFn) => {\n//   const errorResponse = new HttpErrorResponse({\n//     error: 'test 404 error',\n//     status: 404, statusText: 'Not Found'\n//   });\n//\n//   httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => done.fail('expected an error, not heroes'),\n//     error: error  => {\n//       expect(error.message).toContain('test 404 error');\n//       done();\n//     }\n//   });\n// });\ndescribe('CartService', () => {\n    it('should ', function () {\n    });\n    it('should ', function () {\n    });\n});\n"]},"metadata":{},"sourceType":"script"}