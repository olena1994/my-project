{"ast":null,"code":"// import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n// import { CartService } from './cart.service';\n// import { Phone } from './models/phone';\n//\n// let httpClientSpy: jasmine.SpyObj<HttpClient>;\n// let cartService: CartService;\n//\n// beforeEach(() => {\n//   httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n//   cartService = new CartService(httpClientSpy);\n// });\n//\n// it('should return expected carts (HttpClient called once)', (done: DoneFn) => {\n//   const expectedHeroes: Phone[] =\n//     [\n//       { id: '1', age: 1, snippet: 'dfb', imageUrl: 'drfgsb', name: 'zdrvs', price: 34 },\n//       { id: '2', age: 3, snippet: 'dfbfb', imageUrl: 'drfgxfbsb', name: 'zdrxfgbvs', price: 334 },\n//     ];\n//\n//   httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => {\n//       expect(carts)\n//         .withContext('expected heroes')\n//         .toEqual(expectedHeroes);\n//       done();\n//     },\n//     error: done.fail\n//   });\n//   expect(httpClientSpy.get.calls.count())\n//     .withContext('one call')\n//     .toBe(1);\n// });\n//\n// it('should return an error when the server returns a 404', (done: DoneFn) => {\n//   const errorResponse = new HttpErrorResponse({\n//     error: 'test 404 error',\n//     status: 404, statusText: 'Not Found'\n//   });\n//\n//   httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => done.fail('expected an error, not heroes'),\n//     error: error  => {\n//       expect(error.message).toContain('test 404 error');\n//       done();\n//     }\n//   });\n// });\nimport { CartService } from './cart.service';\nimport { TestBed, inject } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../environments/environment';\ndescribe('CartService', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CartService, {\n        provide: HttpClient,\n        useValue: HttpClientTestingModule\n      }]\n    });\n  });\n  it('should get oll phone', inject([CartService, HttpTestingController], (cartService, backend) => {\n    let mockPhones = [{\n      id: '2',\n      age: 4,\n      snippet: 'dfxv',\n      imageUrl: 'dfxv',\n      name: 'dfxv',\n      price: 347\n    }, {\n      id: '3',\n      age: 32,\n      snippet: 'dfxv',\n      imageUrl: 'dfxv',\n      name: 'dfxv',\n      price: 34\n    }];\n    cartService.getAll().subscribe(Phone => {\n      return expect(Phone).toEqual(mockPhones);\n    });\n    backend.expectOne({\n      method: 'GET',\n      url: `${environment.apiURL}/products.json`\n    }).flush(mockPhones);\n  }));\n  it('should get phone details by id', inject([CartService, HttpTestingController], (cartService, backend) => {\n    let mockPhoneDetails = {\n      additionalFeatures: 'kjbknj',\n      android: 'xdfb',\n      battery: 'xdfb',\n      camera: 'xdfb',\n      connectivity: 'xdfb',\n      description: 'xdfb',\n      display: 'xdfb',\n      hardware: 'xdfb',\n      id: 'xdfb',\n      images: ['xdfb', 'xdfb'],\n      name: 'xdfb',\n      sizeAndWeight: 'xdfb',\n      storage: 'xdfb',\n      price: 12\n    };\n    cartService.getById('1').subscribe(PhoneDetails => {\n      expect(PhoneDetails).toEqual(mockPhoneDetails);\n    });\n    backend.expectOne({\n      method: 'GET',\n      url: `${environment.apiURL}/products/1.json`\n    }).flush(mockPhoneDetails);\n  }));\n});","map":{"version":3,"sources":["/Users/olena.kopyl/Documents/projects/my-project/src/app/cart.service.spec.ts"],"names":["CartService","TestBed","inject","HttpClientTestingModule","HttpTestingController","HttpClient","environment","describe","beforeEach","configureTestingModule","imports","providers","provide","useValue","it","cartService","backend","mockPhones","id","age","snippet","imageUrl","name","price","getAll","subscribe","Phone","expect","toEqual","expectOne","method","url","apiURL","flush","mockPhoneDetails","additionalFeatures","android","battery","camera","connectivity","description","display","hardware","images","sizeAndWeight","storage","getById","PhoneDetails"],"mappings":"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","sourcesContent":["// import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n// import { CartService } from './cart.service';\n// import { Phone } from './models/phone';\n//\n// let httpClientSpy: jasmine.SpyObj<HttpClient>;\n// let cartService: CartService;\n//\n// beforeEach(() => {\n//   httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n//   cartService = new CartService(httpClientSpy);\n// });\n//\n// it('should return expected carts (HttpClient called once)', (done: DoneFn) => {\n//   const expectedHeroes: Phone[] =\n//     [\n//       { id: '1', age: 1, snippet: 'dfb', imageUrl: 'drfgsb', name: 'zdrvs', price: 34 },\n//       { id: '2', age: 3, snippet: 'dfbfb', imageUrl: 'drfgxfbsb', name: 'zdrxfgbvs', price: 334 },\n//     ];\n//\n//   httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => {\n//       expect(carts)\n//         .withContext('expected heroes')\n//         .toEqual(expectedHeroes);\n//       done();\n//     },\n//     error: done.fail\n//   });\n//   expect(httpClientSpy.get.calls.count())\n//     .withContext('one call')\n//     .toBe(1);\n// });\n//\n// it('should return an error when the server returns a 404', (done: DoneFn) => {\n//   const errorResponse = new HttpErrorResponse({\n//     error: 'test 404 error',\n//     status: 404, statusText: 'Not Found'\n//   });\n//\n//   httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n//\n//   cartService.getAll().subscribe({\n//     next: carts => done.fail('expected an error, not heroes'),\n//     error: error  => {\n//       expect(error.message).toContain('test 404 error');\n//       done();\n//     }\n//   });\n// });\nimport { CartService } from './cart.service';\nimport { TestBed, inject } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../environments/environment';\ndescribe('CartService', () => {\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n            imports: [HttpClientTestingModule],\n            providers: [CartService,\n                { provide: HttpClient, useValue: HttpClientTestingModule }]\n        });\n    });\n    it('should get oll phone', inject([CartService, HttpTestingController], (cartService, backend) => {\n        let mockPhones = [\n            {\n                id: '2',\n                age: 4,\n                snippet: 'dfxv',\n                imageUrl: 'dfxv',\n                name: 'dfxv',\n                price: 347,\n            },\n            {\n                id: '3',\n                age: 32,\n                snippet: 'dfxv',\n                imageUrl: 'dfxv',\n                name: 'dfxv',\n                price: 34,\n            }\n        ];\n        cartService.getAll().subscribe(Phone => {\n            return expect(Phone).toEqual(mockPhones);\n        });\n        backend.expectOne({\n            method: 'GET',\n            url: `${environment.apiURL}/products.json`\n        }).flush(mockPhones);\n    }));\n    it('should get phone details by id', inject([CartService, HttpTestingController], (cartService, backend) => {\n        let mockPhoneDetails = {\n            additionalFeatures: 'kjbknj',\n            android: 'xdfb',\n            battery: 'xdfb',\n            camera: 'xdfb',\n            connectivity: 'xdfb',\n            description: 'xdfb',\n            display: 'xdfb',\n            hardware: 'xdfb',\n            id: 'xdfb',\n            images: ['xdfb', 'xdfb'],\n            name: 'xdfb',\n            sizeAndWeight: 'xdfb',\n            storage: 'xdfb',\n            price: 12,\n        };\n        cartService.getById('1').subscribe(PhoneDetails => {\n            expect(PhoneDetails).toEqual(mockPhoneDetails);\n        });\n        backend.expectOne({\n            method: 'GET',\n            url: `${environment.apiURL}/products/1.json`\n        }).flush(mockPhoneDetails);\n    }));\n});\n"]},"metadata":{},"sourceType":"module"}